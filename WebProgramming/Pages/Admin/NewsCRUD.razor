@page "/admin/news"
@page "/admin"
@using System.Net.Http
@using System.Net
@using Newtonsoft.Json
@using WebProgramming.Models


<h3>NewsCRUD</h3>
<a href="/news/addNews" class="btn btn-outline-primary float-right m-b-1">Add</a>
<table class="table table-bordered table-info table-striped table-hover">
    <thead>
        <tr>
            <th>Title</th>
            <th>SubTitle</th>
            <th>Description</th>
            <th>Image</th>
            <th>Update</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in news)
        {
            string imgSrc=String.Empty;
            if (item.Image != null)
            {
                var base64 = Convert.ToBase64String(item.Image);
                imgSrc = String.Format("data:image/gif;base64,{0}", base64);
            }
            else
            {
                imgSrc = item.Href;
            }
            <tr>
                <td>@item.Title </td>
                <td>@item.SubTitle</td>
                <td>@item.Description.Substring(0, 5)...</td>
                <td style="width:15%;"> <img class="card-img-top" src="@imgSrc" alt="Card image cap"></td>
                <td><a href="news/updatenews/@item.Id" class="btn btn-outline-warning">Update</a></td>
                <td><a href="news/DeleteNews/@item.Id" class="btn btn-outline-danger">Delete</a></td>
            </tr>
        }

    </tbody>

</table>
<style>
    td {
        text-align: center;
    }
</style>

@code {
    [Inject]
    private IHttpClientFactory clientFactory { get; set; }

    private List<News> news = new List<News>();

    protected async override Task OnInitializedAsync()
    {
        using var httpClient = clientFactory.CreateClient("blazorapp");

        var response = await httpClient.GetAsync("api/news/getAll");
        if(response.StatusCode == HttpStatusCode.OK)
        {
            var content = await response.Content.ReadAsStringAsync();
            news = JsonConvert.DeserializeObject<List<News>>(content);
        }
        await base.OnInitializedAsync();
    }
}
